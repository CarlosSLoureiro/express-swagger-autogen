import { Router } from "express";
import expressListEndpoints from "express-list-endpoints";
import swaggerUi from "swagger-ui-express";
import type { OpenAPI3 } from "openapi-typescript";
import { ExpressSwaggerAutogenUtils } from "./utils";
import { ExpressSwaggerAutogenValidationError } from "./errors";

type ExpressSwaggerAutogenDocsOptions = {
  setup?: Partial<OpenAPI3>;
  basePath?: string;
  endpoint?: string;
  validatePaths?: boolean;
};

/**
 * Generates Swagger documentation for an Express application.
 *
 * @param {Router} router - The Express Router instance.
 * @param {ExpressSwaggerAutogenDocsOptions} [options] - Optional configuration options.
 * @param {Partial<OpenAPI3>} [options.setup] - Custom OpenAPI3 setup for Swagger UI.
 * @param {string} [options.basePath] - Base path to prepend to all endpoints.
 * @param {string} [options.endpoint] - The endpoint where the Swagger UI will be served. Defaults to "/documentation".
 * @param {boolean} [options.validatePaths] - Whether to validate the paths defined in `options.paths` against the actual endpoints in the router. If true, it will throw an error if any path or method does not exist in the router endpoints.
 */
export default function expressSwaggerAutogen(router: Router, options?: ExpressSwaggerAutogenDocsOptions): void {
  options = {
    ...options,
    endpoint: options?.endpoint || "/documentation",
  };

  let list = expressListEndpoints(router);

  if (options?.basePath) {
    list = list.map((endpoint) => {
      return {
        ...endpoint,
        path: `${options?.basePath}${endpoint.path}`,
      };
    });
  }

  if (options?.setup?.paths) {
    Object.entries(options.setup.paths).forEach(([path, setup]) => {
      const normalizedPath = ExpressSwaggerAutogenUtils.normalizeSwaggerToExpressPath(path);
      const endpoint = list.find((endpoint) => endpoint.path === normalizedPath);

      if (!endpoint) {
        const message = `[express-swagger-autogen]: Path "${path}" defined in setup.paths does not exist in the router endpoints as "${normalizedPath}".`;

        console.warn(message);

        if (options?.validatePaths) {
          throw new ExpressSwaggerAutogenValidationError(message);
        }
        return;
      }

      Object.keys(setup).forEach((method) => {
        if (!endpoint.methods.includes(method.toUpperCase())) {
          const message = `[express-swagger-autogen]: Method "${method}" for path "${path}" defined in setup.paths does not exist in the router endpoint "${normalizedPath}".`;

          console.warn(message);

          if (options?.validatePaths) {
            throw new ExpressSwaggerAutogenValidationError(message);
          }
        }
      });
    });
  }

  const paths = {} as any;

  list.forEach((endpoint) => {
    const methods = Object.values(endpoint.methods);
    const path = endpoint.path;
    methods.forEach((method) => {
      if (!paths[path]) {
        paths[path] = {};
      }

      const pathParams = ExpressSwaggerAutogenUtils.extractPathParams(path);

      const parameters = pathParams
        .map(
          (param) =>
            ({
              name: param,
              in: "path",
              required: true,
              schema: {
                type: "string",
              },
            } as any)
        )
        .concat([
          {
            in: "query",
            name: "params",
            style: "form",
            explode: true,
            schema: {
              type: "object",
              additionalProperties: {
                type: "string",
              },
            },
          },
        ]);

      const requestBody = ["POST", "PUT", "PATCH"].includes(method.toUpperCase()) && {
        required: false,
        content: {
          "application/json": {
            schema: {
              type: "object",
            },
          },
        },
      };

      paths[path][method.toLowerCase()] = {
        tags: [ExpressSwaggerAutogenUtils.extractFirstPathName(options?.basePath ? path.slice(options.basePath.length) : path)],
        parameters,
        requestBody,
        responses: {
          200: {
            description: "Success",
          },
        },
      };
    });
  });

  const defaultSetup = {
    openapi: "3.0.0",
    info: {
      title: process.env.npm_package_name,
      version: process.env.npm_package_version,
      description:
        "API documentation generated by [Express Swagger Autogen](https://github.com/CarlosSLoureiro/express-swagger-autogen)",
    },
  };

  const setup = {
    ...(options?.setup ? ExpressSwaggerAutogenUtils.merge(defaultSetup, options.setup) : defaultSetup),
    paths: options?.setup?.paths ? ExpressSwaggerAutogenUtils.merge(paths, options.setup.paths) : paths,
  };

  setup.paths = Object.fromEntries(
    Object.entries(setup.paths).map(([path, value]) => [
      ExpressSwaggerAutogenUtils.normalizeExpressToSwaggerPath(path),
      value,
    ])
  );

  router.use(options.endpoint!, swaggerUi.serve, swaggerUi.setup(setup));

  console.log(`[express-swagger-autogen]: Swagger documentation available at "${options.endpoint}"`);
}
